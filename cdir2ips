#!/bin/bash

# cdir2ip: take a cdir specified by command line arguments display info and
# return ip range belongs to.

# Copyright (C) May, 2014 Carlos Perez Cerrato <cperezcerrato@gmail.com>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Functions and variables

function help_me(){
    echo -e "
    $(echo $0 | xargs basename) this script show information specified by command line arguments furthermore
it expand cdir into a ip range.

Usage: cdir2ips -c <ADDRESS>[/<NETMASK>]

    -h Print this help.
    -c CDIR argument.
    -e expand IP list included in CDIR argument.
    "

}


function check_cdir(){
    if [[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(\/[0-9]{1,2})?$ ]]
    then
        MASK=$(echo "$1"|cut -d'/' -f2)
        IP=$(echo "$1"|cut -d'/' -f1)
        if [[ $MASK == $IP ]]
        then
            MASK=32
        fi
        IFSO=$IFS IFS='.' OCTETS=($IP) IFS=$IFSO
        for OCTET in ${OCTETS[@]}
        do
            if [[ $OCTET -lt 0 ]] || [[ $OCTET -gt 255 ]]
            then
                echo "Error, ip $IP not valid." >> /dev/stderr
                exit 1
                else
                    if [[ $MASK -lt 8 ]] || [[ $MASK -gt 32 ]]
                    then
                        echo "Error, $MASK not valid. Must be a number betwen 8 and 32" > /dev/stderr
                        exit 1
                    fi
            fi
        done
    else
        echo "Error, $1 not valid cdir." >> /dev/stderr
        exit 1
    fi
}

function calculate_range(){
    for OCTET in ${OCTETS[@]}
    do
        OCTET_BINARY=$(bc <<< "ibase=10;obase=2;${OCTET}")
        IP_BINARY="$IP_BINARY$(printf "%08d" ${OCTET_BINARY})"
    done
    NET_ADDR_BIN=${IP_BINARY:0:$MASK}
    NET_ADDR_BIN=$(refill_right_with $NET_ADDR_BIN 0)
    BCAST_ADDR_BIN=${IP_BINARY:0:$MASK}
    BCAST_ADDR_BIN=$(refill_right_with $BCAST_ADDR_BIN 1)
    for ((i=0;i<$MASK;i++))
    do
        MASK_ADDR_BIN="${MASK_ADDR_BIN}1"
    done

    MASK_ADDR_BIN=$(refill_right_with $MASK_ADDR_BIN 0)

    # Split in octets
    for ((i=0;i<4;i++))
    do
        NET_ADDR_SPLIT[$i]=${NET_ADDR_BIN:$((i*8)):8}
        BCAST_ADDR_SPLIT[$i]=${BCAST_ADDR_BIN:$((i*8)):8}
        MASK_ADDR_SPLIT[$i]=${MASK_ADDR_BIN:$((i*8)):8}
    done

    for ((i=0;i<4;i++))
    do
        NET_IP_OCTET[$i]=$((2#${NET_ADDR_SPLIT[$i]}))
        BCAST_IP_OCTET[$i]=$((2#${BCAST_ADDR_SPLIT[$i]}))
        MASK_IP_OCTET[$i]=$((2#${MASK_ADDR_SPLIT[$i]}))
    done

    NETMASK="${MASK_IP_OCTET[0]}.${MASK_IP_OCTET[1]}.${MASK_IP_OCTET[2]}.${MASK_IP_OCTET[3]}"
    NETWORK="${NET_IP_OCTET[0]}.${NET_IP_OCTET[1]}.${NET_IP_OCTET[2]}.${NET_IP_OCTET[3]}/$MASK"
    BCAST="${BCAST_IP_OCTET[0]}.${BCAST_IP_OCTET[1]}.${BCAST_IP_OCTET[2]}.${BCAST_IP_OCTET[3]}"
    HOSTMIN="${NET_IP_OCTET[0]}.${NET_IP_OCTET[1]}.${NET_IP_OCTET[2]}.$((${NET_IP_OCTET[3]}+1))"
    HOSTMAX="${BCAST_IP_OCTET[0]}.${BCAST_IP_OCTET[1]}.${BCAST_IP_OCTET[2]}.$((${BCAST_IP_OCTET[3]}-1))"
    NUMHOSTS="$((2**(32-$MASK)-2))"

    #Determine class
    CLASS_BIN=${IP_BINARY:0:3}
    if [[ $CLASS_BIN =~ ^110$ ]]
    then
        CLASS="Clase C"
    elif [[ $CLASS_BIN =~ ^10[0-1]$ ]]
    then
        CLASS="Clase B"
    elif [[ "$CLASS_BIN" =~ ^0[0-1]{2}$ ]]
    then
        CLASS="Clase A"
    else
        CLASS="Clase desconocidda $CLASS_BIN"
    fi
}

function show_info(){
    echo -e "\n\t\e[1mAddress:\t\e[21m$IP"
    echo -e "\t\e[1mNetmask:\t\e[21m$NETMASK = $MASK"
    case $MASK in
        32)
            echo -e "\t\e[1mRoute:\t\e[21m$IP"
            echo -e "\t\e[1mHosts:\t\t\e[21m1"
            ;;
        31)
           echo -e "\t\e[1mNetwork:\t\e[21m$NETWORK"
           echo -e "\t\e[1mFirst Host:\t\e[21m$HOSTMIN"
           echo -e "\t\e[1mLast Host:\t\e[21m$HOSTMAX"
           echo -e "\t\e[1mHosts:\t\t\e[21m2"
           ;;
        *)
           echo -e "\t\e[1mNetwork:\t\e[21m$NETWORK"
           echo -e "\t\e[1mFirst Host:\t\e[21m$HOSTMIN"
           echo -e "\t\e[1mLast Host:\t\e[21m$HOSTMAX"
           echo -e "\t\e[1mBroadcast:\t\e[21m$BCAST"
           echo -e "\t\e[1mHosts:\t\t\e[21m$NUMHOSTS"
           ;;
    esac
    echo -e "\t\e[1mClass:\t\t\e[21m$CLASS\n"
}


function cdir_print(){
    for ((a=${NET_IP_OCTET[0]}; a<=${BCAST_IP_OCTET[0]};a++))
    do
        for ((b=${NET_IP_OCTET[1]}; b<=${BCAST_IP_OCTET[1]};b++))
        do
            for ((c=${NET_IP_OCTET[2]}; c<=${BCAST_IP_OCTET[2]};c++))
            do
                for ((d=${NET_IP_OCTET[3]}; d<=${BCAST_IP_OCTET[3]};d++))
                do
                    echo "$a.$b.$c.$d"
                done
            done
        done
    done
}


refill_right_with(){
    REFILL=$1
    STUFF=$2
    if [[ $STUFF -ne 0 ]] && [[ $STUFF -ne 1 ]]
    then
        echo "Can't refill. Invalid stuff." >> /dev/stderr
        exit 1
    fi
    for ((i=$MASK; i<32; i++))
    do
        REFILL="${REFILL}${STUFF}"
    done
    echo $REFILL
}

if [ $# -lt 1 ]
then
    help_me
    exit 1
fi

while getopts "hec:" opt; do
  case $opt in
    c) CDIR="$OPTARG" ;;
    e) EXPAND=1;;
    h|?|*) help_me && exit 0 ;;
  esac
done

check_cdir $CDIR
calculate_range

if [ -n "$EXPAND" ]
then
    cdir_print
else
    show_info
fi

